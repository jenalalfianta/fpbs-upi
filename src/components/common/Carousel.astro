---
interface ImageItem { src: string; alt?: string }
export interface Props {
  images: ImageItem[];
  heightMobile?: number;
  heightDesktop?: number;
  intervalMs?: number;
  objectFit?: 'cover' | 'contain';
}

const {
  images = [],
  heightMobile = 420,
  heightDesktop = 700,
  intervalMs = 8000,
  objectFit = 'contain',
} = Astro.props;
---

<section class="bg-gray-50 dark:bg-gray-800 m-0 p-0">
  <style>
    .carousel-wrapper {
      height: var(--h-mobile);
      padding: 0 !important;
      margin: 0 !important;
    }
    @media (min-width: 768px) {
      .carousel-wrapper {
        height: var(--h-desktop);
      }
    }
    .carousel-slide {
      position: absolute;
      inset: 0;
      opacity: 0;
      transition: opacity 0.7s ease-in-out;
      pointer-events: none;
    }
    .carousel-slide.active {
      opacity: 1;
      pointer-events: auto;
    }
    .carousel-wrapper img {
      object-fit: var(--obj-fit);
      width: 100%;
      height: 100%;
    }
    .carousel-wrapper:hover .carousel-arrow {
      opacity: 1;
    }
    .carousel-arrow {
      opacity: 0;
      transition: opacity 0.3s ease;
    }
  </style>

  <div
    class="relative w-full carousel-wrapper overflow-hidden bg-gray-50 dark:bg-gray-800 m-0 p-0"
    data-interval={intervalMs}
    style={`--h-mobile:${heightMobile}px; --h-desktop:${heightDesktop}px; --obj-fit:${objectFit};`}
  >
    {images.map((img, i) => (
      <div class={`carousel-slide ${i === 0 ? 'active' : ''}`}>
        <img src={img.src} alt={img.alt ?? `Slide ${i + 1}`} loading="lazy" decoding="async" />
      </div>
    ))}

    <button type="button" class="carousel-arrow absolute top-0 left-0 z-20 flex items-center justify-center h-full px-4 group focus:outline-none" data-action="prev">
      <span class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-gray-500/50 group-hover:bg-gray-700/80">
        <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </span>
    </button>
    <button type="button" class="carousel-arrow absolute top-0 right-0 z-20 flex items-center justify-center h-full px-4 group focus:outline-none" data-action="next">
      <span class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-gray-500/50 group-hover:bg-gray-700/80">
        <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m9 5 7 7-7 7" />
        </svg>
      </span>
    </button>

    <div class="absolute bottom-4 left-1/2 -translate-x-1/2 flex gap-2 z-20" data-role="dots"></div>
  </div>

  <script>
    const root = document.currentScript?.previousElementSibling;
    if (root) {
      const slides = root.querySelectorAll('.carousel-slide');
      const dotsContainer = root.querySelector('[data-role="dots"]');
      const btnPrev = root.querySelector('[data-action="prev"]');
      const btnNext = root.querySelector('[data-action="next"]');
      const intervalMs = Number(root.getAttribute('data-interval')) || 10000;

      let current = 0;
      let timer;

      function renderDots() {
        dotsContainer.innerHTML = '';
        slides.forEach((_, i) => {
          const dot = document.createElement('button');
          dot.type = 'button';
          dot.className = 'w-3 h-3 rounded-full ' + (i === 0 ? 'bg-white' : 'bg-gray-400/70');
          dot.addEventListener('click', () => showSlide(i, true));
          dotsContainer.appendChild(dot);
        });
      }

      function updateDots() {
        Array.from(dotsContainer.children).forEach((dot, i) => {
          dot.classList.toggle('bg-white', i === current);
          dot.classList.toggle('bg-gray-400/70', i !== current);
        });
      }

      function showSlide(index, resetTimer = false) {
        slides.forEach((slide, i) => {
          slide.classList.toggle('active', i === index);
        });
        current = index;
        updateDots();
        if (resetTimer) restartAuto();
      }

      function nextSlide() {
        const next = (current + 1) % slides.length;
        showSlide(next);
      }

      function prevSlide() {
        const prev = (current - 1 + slides.length) % slides.length;
        showSlide(prev);
      }

      function startAuto() {
        stopAuto();
        timer = setInterval(nextSlide, intervalMs);
      }
      function stopAuto() {
        if (timer) clearInterval(timer);
      }
      function restartAuto() {
        stopAuto();
        startAuto();
      }

      btnNext?.addEventListener('click', nextSlide);
      btnPrev?.addEventListener('click', prevSlide);

      root.addEventListener('mouseenter', stopAuto);
      root.addEventListener('mouseleave', startAuto);

      renderDots();
      updateDots();
      startAuto();
    }
  </script>
</section>
